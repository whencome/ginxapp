// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/whencome/ginx"
	"github.com/whencome/ginxapp/internal/biz"
	"github.com/whencome/ginxapp/internal/data"
	"github.com/whencome/ginxapp/internal/etc"
	"github.com/whencome/ginxapp/internal/handler"
	"github.com/whencome/ginxapp/internal/server"
	"github.com/whencome/goutil/log"
)

// Injectors from wire.go:

// wireApp init app
func wireApp(logger log.Logger, site *ginx.ServerOptions, redisConf *etc.RedisConfig) (*App, func(), error) {
	dataData, cleanup, err := data.NewData(logger, redisConf)
	if err != nil {
		return nil, nil, err
	}
	captchaRepo := data.NewCaptchaRepo(dataData)
	captchaUseCase := biz.NewCaptchaUseCase(captchaRepo)
	publicHandler := handler.NewPublicHandler(captchaUseCase)
	cacheRepo := data.NewCacheRepo(dataData)
	authUseCase := biz.NewAuthUseCase(cacheRepo)
	authHandler := handler.NewAuthHandler(authUseCase, captchaUseCase)
	httpServer := server.NewHTTPServer(site, logger, publicHandler, authHandler)
	cronUseCase := biz.NewCronUseCase()
	cronServer := server.NewCronServer(cronUseCase)
	mainApp, err := NewApp(httpServer, cronServer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return mainApp, func() {
		cleanup()
	}, nil
}
